{
	"name": "EmployeeDimLoader",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "EmployeeFiles",
						"type": "DatasetReference"
					},
					"name": "Employees",
					"description": " Source employees file, changes every day",
					"script": "source(output(\n\t\tEmpID as string,\n\t\tRegionCode as string,\n\t\tStatusCode as string,\n\t\tFunctionCode as string,\n\t\tGradeLevel as string,\n\t\tRoleCode as string,\n\t\tStartDt as string,\n\t\tEndDt as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> Employees"
				},
				{
					"dataset": {
						"referenceName": "DimEmployee2",
						"type": "DatasetReference"
					},
					"name": "DimEmployees",
					"description": "Current rows in DimEmployees DW table",
					"script": "source(output(\n\t\tEmpID as integer,\n\t\tRegionCode as string,\n\t\tStatusCode as string,\n\t\tFunctionCode as string,\n\t\tGradeLevel as string,\n\t\tRoleCode as string,\n\t\tStartDt as string,\n\t\tEndDt as string,\n\t\tiscurrent as integer,\n\t\tprocesstime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'table') ~> DimEmployees"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimEmployee2",
						"type": "DatasetReference"
					},
					"name": "sinkNew",
					"description": " ",
					"script": "SetAttrsForNew sink(input(\n\t\tEmpID as integer,\n\t\tRegionCode as string,\n\t\tStatusCode as string,\n\t\tFunctionCode as string,\n\t\tGradeLevel as string,\n\t\tRoleCode as string,\n\t\tStartDt as string,\n\t\tEndDt as string,\n\t\tiscurrent as integer,\n\t\tprocesstime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tbatchSize:50,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tpartitionBy('roundRobin', 4)) ~> sinkNew"
				},
				{
					"dataset": {
						"referenceName": "DimEmployee2",
						"type": "DatasetReference"
					},
					"name": "sinkUpdates",
					"description": " ",
					"script": "SetAttrsUpdate sink(input(\n\t\tEmpID as integer,\n\t\tRegionCode as string,\n\t\tStatusCode as string,\n\t\tFunctionCode as string,\n\t\tGradeLevel as string,\n\t\tRoleCode as string,\n\t\tStartDt as string,\n\t\tEndDt as string,\n\t\tiscurrent as integer,\n\t\tprocesstime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tbatchSize:50,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tpartitionBy('roundRobin', 4)) ~> sinkUpdates"
				},
				{
					"dataset": {
						"referenceName": "DimEmployee2",
						"type": "DatasetReference"
					},
					"name": "sinkInactive",
					"description": " Age out old rows",
					"script": "AlterRow1 sink(input(\n\t\tEmpID as integer,\n\t\tRegionCode as string,\n\t\tStatusCode as string,\n\t\tFunctionCode as string,\n\t\tGradeLevel as string,\n\t\tRoleCode as string,\n\t\tStartDt as string,\n\t\tEndDt as string,\n\t\tiscurrent as integer,\n\t\tprocesstime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'table',\n\tbatchSize:50,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['EmpID'],\n\tmapColumn(\n\t\tEmpID,\n\t\tEndDt,\n\t\tiscurrent,\n\t\tprocesstime\n\t),\n\tpartitionBy('roundRobin', 4)) ~> sinkInactive"
				}
			],
			"transformations": [
				{
					"name": "TypeConversions",
					"script": "DimEmployees derive(EmpID = toInteger(EmpID)) ~> TypeConversions"
				},
				{
					"name": "TypeConversionsAndTimestamp",
					"script": "NullFilter derive(EmpID = toInteger(EmpID),\n\t\tprocesstime = currentTimestamp()) ~> TypeConversionsAndTimestamp"
				},
				{
					"name": "LookupIDs",
					"script": "TypeConversionsAndTimestamp, TypeConversions lookup(TypeConversionsAndTimestamp@EmpID == TypeConversions@EmpID,\n\tbroadcast: 'none')~> LookupIDs"
				},
				{
					"name": "ConditionalSplit1",
					"script": "NormNames split(isNull(iscurrent),\n\tdisjoint: false) ~> ConditionalSplit1@(NewRow, CheckForUpdates)"
				},
				{
					"name": "checkForChanges",
					"script": "NameNorm2, TypeConversions exists(NameNorm2@EmpID == TypeConversions@EmpID,\n\tnegate:false,\n\tbroadcast: 'none')~> checkForChanges"
				},
				{
					"name": "SetAttrsForNew",
					"script": "ConditionalSplit1@NewRow derive(iscurrent = 1) ~> SetAttrsForNew"
				},
				{
					"name": "SetAttrsInactive",
					"description": "make iscurrent 0",
					"script": "checkForChanges derive(iscurrent = 0) ~> SetAttrsInactive"
				},
				{
					"name": "SetAttrsUpdate",
					"script": "checkForChanges derive(iscurrent = 1) ~> SetAttrsUpdate"
				},
				{
					"name": "NormNames",
					"script": "LookupIDs select(mapColumn(\n\t\tEmpID = TypeConversionsAndTimestamp@EmpID,\n\t\tRegionCode = Employees@RegionCode,\n\t\tStatusCode = Employees@StatusCode,\n\t\tFunctionCode = Employees@FunctionCode,\n\t\tGradeLevel = Employees@GradeLevel,\n\t\tRoleCode = Employees@RoleCode,\n\t\tStartDt = Employees@StartDt,\n\t\tEndDt = Employees@EndDt,\n\t\tiscurrent,\n\t\tprocesstime = TypeConversionsAndTimestamp@processtime\n\t))~> NormNames"
				},
				{
					"name": "InactiveFields",
					"script": "SetAttrsInactive select(mapColumn(\n\t\tEmpID,\n\t\tEndDt,\n\t\tiscurrent,\n\t\tprocesstime\n\t))~> InactiveFields"
				},
				{
					"name": "AlterRow1",
					"script": "InactiveFields alterRow(updateIf(true())) ~> AlterRow1"
				},
				{
					"name": "NullFilter",
					"description": "Filter out NULLs from source file",
					"script": "Employees filter(!isNull(EmpID)) ~> NullFilter"
				},
				{
					"name": "NameNorm2",
					"script": "ConditionalSplit1@CheckForUpdates select(mapColumn(\n\t\tEmpID,\n\t\tRegionCode,\n\t\tStatusCode,\n\t\tFunctionCode,\n\t\tGradeLevel,\n\t\tRoleCode,\n\t\tStartDt,\n\t\tEndDt,\n\t\tiscurrent,\n\t\tprocesstime\n\t))~> NameNorm2"
				}
			]
		}
	}
}
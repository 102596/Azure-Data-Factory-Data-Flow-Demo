{
	"name": "TaxiDemoLarge",
	"properties": {
		"folder": {
			"name": "Demos"
		},
		"sources": [
			{
				"dataset": {
					"referenceName": "TaxiDataSQLDB",
					"type": "DatasetReference"
				},
				"name": "TripData",
				"script": "source(output(\n\t\tmedallion as string,\n\t\thack_license as string,\n\t\tvendor_id as string,\n\t\trate_code as string,\n\t\tstore_and_fwd_flag as string,\n\t\tpickup_datetime as string,\n\t\tdropoff_datetime as string,\n\t\tpassenger_count as integer,\n\t\ttrip_time_in_secs as long,\n\t\ttrip_distance as double,\n\t\tpickup_longitude as double,\n\t\tpickup_latitude as double,\n\t\tdropoff_longitude as double,\n\t\tdropoff_latitude as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> TripData"
			},
			{
				"dataset": {
					"referenceName": "TripFareLarge",
					"type": "DatasetReference"
				},
				"name": "TripFare",
				"script": "source(output(\n\t\tmedallion as string,\n\t\thack_license as string,\n\t\tvendor_id as string,\n\t\tpickup_datetime as string,\n\t\tpayment_type as string,\n\t\tfare_amount as double,\n\t\tsurcharge as double,\n\t\tmta_tax as double,\n\t\ttip_amount as double,\n\t\ttolls_amount as double,\n\t\ttotal_amount as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> TripFare"
			}
		],
		"sinks": [
			{
				"dataset": {
					"referenceName": "TaxiDemoVendorStatsSink",
					"type": "DatasetReference"
				},
				"name": "VendorStatsSink",
				"script": "AggregateVendorStats sink(partitionBy('hash', 1),\n\tsaveMode:'overwrite') ~> VendorStatsSink"
			},
			{
				"dataset": {
					"referenceName": "TaxiDemoDayStatsSink",
					"type": "DatasetReference"
				},
				"name": "DayStatsSink",
				"script": "AggregateDayStats sink(partitionBy('hash', 1),\n\tsaveMode:'overwrite') ~> DayStatsSink"
			},
			{
				"dataset": {
					"referenceName": "TaxiDemoTotalByPaymentType",
					"type": "DatasetReference"
				},
				"name": "TotalPaymentByPaymentType",
				"script": "AggregateByPaymentType sink(partitionBy('hash', 1),\n\tsaveMode:'overwrite') ~> TotalPaymentByPaymentType"
			}
		],
		"transformations": [
			{
				"name": "JoinMatchedData",
				"script": "TripData, TripFare join(TripData@hack_license == TripFare@hack_license\n\t&& TripData@medallion == TripFare@medallion\n\t&& TripData@vendor_id == TripFare@vendor_id\n\t&& TripData@pickup_datetime == TripFare@pickup_datetime,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> JoinMatchedData"
			},
			{
				"name": "AggregateVendorStats",
				"script": "JoinMatchedData aggregate(groupBy(vendor_id2= TripData@vendor_id),\n\tpassenger_count = round(sum(passenger_count), 2),\n\t\ttrip_time_in_secs = round(sum(trip_time_in_secs)/60, 2),\n\t\ttrip_distance = round(sum(trip_distance), 2),\n\t\tTotalTripFare = round(sum(total_amount), 2)) ~> AggregateVendorStats"
			},
			{
				"name": "AggregateDayStats",
				"script": "JoinMatchedData aggregate(groupBy(DayOfTheWeek= dayOfWeek(toDate(TripData@pickup_datetime,'yyyy-mm-dd hh:mm:ss'))),\n\ttrip_distance = round(avg(trip_distance), 2),\n\t\tpassenger_count = round(avg(passenger_count), 2),\n\t\ttrip_time_in_secs = round(avg(trip_time_in_secs)/60, 2),\n\t\taverage_fare = round(avg(total_amount), 2)) ~> AggregateDayStats"
			},
			{
				"name": "AggregateByPaymentType",
				"script": "TripFare aggregate(groupBy(payment_type),\n\teach(match(type=='double'), concat($$, '_total') = round(sum ($$)))) ~> AggregateByPaymentType"
			}
		]
	}
}
{
	"name": "TaxiDemo",
	"properties": {
		"folder": {
			"name": "Demos"
		},
		"sources": [
			{
				"dataset": {
					"referenceName": "taxi_trip_data_input",
					"type": "DatasetReference"
				},
				"name": "TripData",
				"script": "source(output(medallion as string,hack_license as string,vendor_id as string,rate_code as string,store_and_fwd_flag as string,pickup_datetime as string,dropoff_datetime as string,passenger_count as short,trip_time_in_secs as long,trip_distance as double,pickup_longitude as double,pickup_latitude as double,dropoff_longitude as double,dropoff_latitude as double),allowSchemaDrift: false,validateSchema: false) ~> TripData"
			},
			{
				"dataset": {
					"referenceName": "taxi_trip_fare_input",
					"type": "DatasetReference"
				},
				"name": "TripFare",
				"script": "source(output(medallion as string,{ hack_license} as string,{ vendor_id} as string,{ pickup_datetime} as string,{ payment_type} as string,{ fare_amount} as double,{ surcharge} as double,{ mta_tax} as double,{ tip_amount} as double,{ tolls_amount} as double,{ total_amount} as double),allowSchemaDrift: false,validateSchema: false) ~> TripFare"
			}
		],
		"sinks": [
			{
				"dataset": {
					"referenceName": "TaxiDemoVendorStatsSink",
					"type": "DatasetReference"
				},
				"name": "VendorStatsSink",
				"script": "AggregateVendorStats sink(saveMode:'overwrite' ,partitionBy('hash', 1)) ~> VendorStatsSink"
			},
			{
				"dataset": {
					"referenceName": "TaxiDemoDayStatsSink",
					"type": "DatasetReference"
				},
				"name": "DayStatsSink",
				"script": "AggregateDayStats sink(saveMode:'overwrite' ,partitionBy('hash', 1)) ~> DayStatsSink"
			},
			{
				"dataset": {
					"referenceName": "TaxiDemoTotalByPaymentType",
					"type": "DatasetReference"
				},
				"name": "TotalPaymentByPaymentType",
				"script": "AggregateByPaymentType sink(saveMode:'overwrite' ,partitionBy('hash', 1)) ~> TotalPaymentByPaymentType"
			}
		],
		"transformations": [
			{
				"name": "JoinMatchedData",
				"script": "TripData, TripFare join(hack_license == { hack_license}&& TripData@medallion == TripFare@medallion&& vendor_id == { vendor_id}&& pickup_datetime == { pickup_datetime},joinType:'inner',broadcast: 'none')~> JoinMatchedData"
			},
			{
				"name": "AggregateVendorStats",
				"script": "JoinMatchedData aggregate(groupBy(vendor_id = vendor_id),passenger_count = round(sum(passenger_count), 2),trip_time_in_secs = round(sum(trip_time_in_secs)/60, 2),trip_distance = round(sum(trip_distance), 2),TotalTripFare = round(sum({ total_amount}), 2)) ~> AggregateVendorStats"
			},
			{
				"name": "AggregateDayStats",
				"script": "JoinMatchedData aggregate(groupBy(DayOfTheWeek = dayOfWeek(toDate(pickup_datetime, 'yyyy-mm-dd hh:mm:ss'))),trip_distance = round(avg(trip_distance), 2),passenger_count = round(avg(passenger_count), 2),trip_time_in_secs = round(avg(trip_time_in_secs)/60, 2),average_fare = round(avg({ total_amount}), 2)) ~> AggregateDayStats"
			},
			{
				"name": "AggregateByPaymentType",
				"script": "TripFare aggregate(groupBy({ payment_type} = { payment_type}),each(match(type=='double'), concat($$, '_total') = round(sum ($$)))) ~> AggregateByPaymentType"
			}
		]
	}
}